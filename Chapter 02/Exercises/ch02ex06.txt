/*********************************************************************/
 * Filename: [ch02ex06.txt]                                           *
 * Author: [a0ma1Q84]                                                 *
 * Date: [October 17, 2023]                                           *
 *                                                                    *
 * Description:                                                       *
 * This file is a solution to exercise 06, related to Section 2.7 of  *
 * "C Programming: A Modern Approach, Second Edition" by K. N. King   *
 *                                                                    *
 * Note:                                                              *
 * This solution is solely developed for educational purposes and     *
 * should not be distributed or used for any other purpose.           *
 *********************************************************************/

Q : Why is it not a good idea for an identifier to contain more than one adjacent underscore (as in current__balance, for example) ?

A : 

- Readability: 
Double underscores can make an identifier harder to read at a quick glance. 
It's easier to miss the extra underscore, which can lead to confusion.

- Reserved for Implementation: 
In C and C++, identifiers with a double underscore (__) at the beginning 
or identifiers that start with an underscore followed by an uppercase letter are reserved for the implementation 
(for use in the compiler and standard library). 

Using such identifiers in the code could lead to conflicts.

- Consistency: 
If some identifiers in the code use single underscores and others use double underscores, 
it can make the codebase inconsistent and harder to maintain.

- Potential for Mistakes: 
If we are used to typing single underscores and we accidentally type two, or vice versa, it's easy to introduce subtle bugs into the code. 

- Clarity: 
Using double underscores may give the false impression that there's some special meaning or significance behind the naming, 
which can be misleading to other developers.